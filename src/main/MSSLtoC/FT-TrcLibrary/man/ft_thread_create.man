.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
..
.TH ft_thread_create 1
.SH NAME
ft_thread_create \- create a new thread
.SS SYNOPSIS



.Sp
.nf
\fB#include\fR <fthread.h>

ft_thread_t \fBft_thread_create\fR (ft_scheduler_t sched,
                              void (*runnable)(void*),
                              void (*cleanup)(void*),                     
                              void *args);

.Sp
.fi

.SS DESCRIPTION



.P

\fBft_thread_create\fR returns a new thread of control and links it to the
scheduler \fBsched\fR. While linked in \fBsched\fR, the new thread
will execute concurrently with the other threads linked in it.

Actual starting of the new thread is asynchronous with the creation.

The  new  thread applies the function \fBrunnable\fR passing it \fBargs\fR as first
argument. The new thread terminates when it executes \fBft_exit\fR or when it 
returns from the \fBrunnable\fR function. 


.P
When stopped (by \fBft_scheduler_stop\fR), the new thread
applies the function \fBcleanup\fR, if it is not \fBNULL\fR, passing
it \fBargs\fR as first argument.


.P
 A pthread is created with each fair thread. This pthread is
initially attached. It can be detached using \fBft_pthread\fR and
\fBpthread_detach\fR.  

.SS RETURN VALUES


On success, \fBft_thread_create\fR returns a new thread; \fBNULL\fR is returned otherwise.

.SS ERRORS


.RS 3
.TP
\&\fBNULL\fR 
The thread cannot be created, or the scheduler \fBsched\fR
is not correctly created.
.RE


.SS SEE ALSO


\fBft_exit\fR (3),
\fBft_scheduler_create\fR (3),
\fBft_scheduler_stop\fR (3),
\fBft_pthread\fR (3).

.SH AUTHOR


