.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
..
.TH ft_scheduler_stop, 1
.SH NAME
ft_scheduler_stop, ft_scheduler_suspend, ft_scheduler_resume \- control threads running in a scheduler
.SS SYNOPSIS

.Sp
.nf
\fB#include\fR <fthread.h>

int \fBft_scheduler_stop\fR    (ft_thread_t th);

int \fBft_scheduler_suspend\fR (ft_thread_t th);

int \fBft_scheduler_resume\fR  (ft_thread_t th);

.Sp
.fi
.SS DESCRIPTION



.P
\fBft_scheduler_stop\fR asks the scheduler running the thread
\fBth\fR to force termination of it. Nothing special happens if
the thread is already terminated.  Otherwise, at the begining of the
next instant, \fBth\fR executes the function \fBcleanup\fR if
it exists, or otherwise terminates immediately. 


.P
\fBft_scheduler_suspend\fR asks the scheduler running the
thread \fBth\fR to suspend execution of it. The suspension will
become actual at the beginning of the next instant of the scheduler. 


.P
 \fBft_scheduler_resume\fR asks the scheduler running the
thread \fBth\fR to resume execution of it. The resume will become
actual at the beginning of the next instant of the
scheduler. Suspension has higher priority than resume: if a thread is
suspended and resumed during the same instant, then the thread will be
suspended. A suspended thread which is stopped is first resumed.  

.SS RETURN VALUES

On success, the value 0 is returned.
On error, a non-zero error code is returned.
.SS ERRORS

.RS 3
.TP
\&\fBBADCREATE\fR 
The thread \fBth\fR is not correctly created.
.RE

.RS 3
.TP
\&\fBBADLINK\fR 
The thread \fBth\fR is unlinked.
.RE

.RS 3
.TP
\&\fBBADMEM\fR 
Not enough memory (the order cannot be stored by the scheduler).
.RE

.SS SEE ALSO

\fBft_thread_create\fR (3),
\fBft_scheduler_create\fR (3).

.SH AUTHOR


