.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
..
.TH ft_thread_link, 1
.SH NAME
ft_thread_link, ft_thread_unlink \- link and unlink a thread
.SS SYNOPSIS

.Sp
.nf
\fB#include\fR <fthread.h>

int \fBft_thread_unlink\fR (void);

int \fBft_thread_link\fR   (ft_scheduler_t sched);

.Sp
.fi
.SS DESCRIPTION


\fBft_thread_unlink\fR unlinks the calling thread from the
scheduler which is running it.  Execution of the thread suspends until
the begining of the next instant of the scheduler. At that point, the
thread turns into a standard thread, not linked to any scheduler,
and it resumes execution autonomously.

Initialy, a fair thread is automatically linked to the scheduler in
which it is created (by \fBft_thread_create\fR).

\fBft_thread_link\fR links the calling thread to the scheduler \fBsched\fR.
The thread must be unlinked. Execution suspends until \fBsched\fR gives the
control to the thread; then, the thread resumes execution, being
scheduled by \fBsched\fR.

.SS RETURN VALUES

On success, the value 0 is returned. On error, a non-zero error code is returned.
.SS ERRORS


.RS 3
.TP
\&\fBBADCREATE\fR 
The scheduler \fBsched\fR is not correctly created.
.RE


.RS 3
.TP
\&\fBBADLINK\fR 

The calling thread is already linked while running
\fBft_thread_link\fR, or it is unlinked while running \fBft_thread_unlink\fR.

.RE


.RS 3
.TP
\&\fBBADMEM\fR 

Not enough memory (the scheduler cannot store the link/unlink order).

.RE

.SS SEE ALSO

\fBft_thread_create\fR (3).

.SH AUTHOR


