.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
..
.TH ft_thread_cooperate, 1
.SH NAME
ft_thread_cooperate, ft_thread_cooperate_n \- cooperate operations
.SS SYNOPSIS

.Sp
.nf
\fB#include\fR <fthread.h>

int \fBft_thread_cooperate\fR   (void);

int \fBft_thread_cooperate_n\fR (int n);

.Sp
.fi
.SS DESCRIPTION

\fBft_thread_cooperate\fR makes the calling thread cooperate by returning
the control to the scheduler in which it is running.

The call \fBft_thread_cooperate_n (k)\fR is equivalent to \fBfor (i=0;i<k;i++) ft_thread_cooperate ()\fR.  

.SS RETURN VALUES

On success, the value 0 is returned.
On error, a non-zero error code is returned.
.SS ERRORS

.RS 3
.TP
\&\fBBADLINK\fR 
The calling thread is unlinked.
.RE


.SH AUTHOR


